// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: test_results.proto

package internal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestResultsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project                string   `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Version                string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Variant                string   `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	TaskName               string   `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	DisplayTaskName        string   `protobuf:"bytes,5,opt,name=display_task_name,json=displayTaskName,proto3" json:"display_task_name,omitempty"`
	TaskId                 string   `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	DisplayTaskId          string   `protobuf:"bytes,7,opt,name=display_task_id,json=displayTaskId,proto3" json:"display_task_id,omitempty"`
	Execution              int32    `protobuf:"varint,8,opt,name=execution,proto3" json:"execution,omitempty"`
	RequestType            string   `protobuf:"bytes,9,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	Mainline               bool     `protobuf:"varint,10,opt,name=mainline,proto3" json:"mainline,omitempty"`
	HistoricalDataIgnore   []string `protobuf:"bytes,11,rep,name=historical_data_ignore,json=historicalDataIgnore,proto3" json:"historical_data_ignore,omitempty"`
	HistoricalDataDisabled bool     `protobuf:"varint,12,opt,name=historical_data_disabled,json=historicalDataDisabled,proto3" json:"historical_data_disabled,omitempty"`
}

func (x *TestResultsInfo) Reset() {
	*x = TestResultsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_results_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResultsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResultsInfo) ProtoMessage() {}

func (x *TestResultsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_test_results_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResultsInfo.ProtoReflect.Descriptor instead.
func (*TestResultsInfo) Descriptor() ([]byte, []int) {
	return file_test_results_proto_rawDescGZIP(), []int{0}
}

func (x *TestResultsInfo) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestResultsInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TestResultsInfo) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *TestResultsInfo) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TestResultsInfo) GetDisplayTaskName() string {
	if x != nil {
		return x.DisplayTaskName
	}
	return ""
}

func (x *TestResultsInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TestResultsInfo) GetDisplayTaskId() string {
	if x != nil {
		return x.DisplayTaskId
	}
	return ""
}

func (x *TestResultsInfo) GetExecution() int32 {
	if x != nil {
		return x.Execution
	}
	return 0
}

func (x *TestResultsInfo) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *TestResultsInfo) GetMainline() bool {
	if x != nil {
		return x.Mainline
	}
	return false
}

func (x *TestResultsInfo) GetHistoricalDataIgnore() []string {
	if x != nil {
		return x.HistoricalDataIgnore
	}
	return nil
}

func (x *TestResultsInfo) GetHistoricalDataDisabled() bool {
	if x != nil {
		return x.HistoricalDataDisabled
	}
	return false
}

type TestResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestResultsRecordId string        `protobuf:"bytes,1,opt,name=test_results_record_id,json=testResultsRecordId,proto3" json:"test_results_record_id,omitempty"`
	Results             []*TestResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *TestResults) Reset() {
	*x = TestResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_results_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults) ProtoMessage() {}

func (x *TestResults) ProtoReflect() protoreflect.Message {
	mi := &file_test_results_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults.ProtoReflect.Descriptor instead.
func (*TestResults) Descriptor() ([]byte, []int) {
	return file_test_results_proto_rawDescGZIP(), []int{1}
}

func (x *TestResults) GetTestResultsRecordId() string {
	if x != nil {
		return x.TestResultsRecordId
	}
	return ""
}

func (x *TestResults) GetResults() []*TestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestName        string                 `protobuf:"bytes,1,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	DisplayTestName string                 `protobuf:"bytes,2,opt,name=display_test_name,json=displayTestName,proto3" json:"display_test_name,omitempty"`
	GroupId         string                 `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Trial           int32                  `protobuf:"varint,4,opt,name=trial,proto3" json:"trial,omitempty"`
	Status          string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	LogTestName     string                 `protobuf:"bytes,6,opt,name=log_test_name,json=logTestName,proto3" json:"log_test_name,omitempty"`
	LineNum         int32                  `protobuf:"varint,7,opt,name=line_num,json=lineNum,proto3" json:"line_num,omitempty"`
	TaskCreateTime  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=task_create_time,json=taskCreateTime,proto3" json:"task_create_time,omitempty"`
	TestStartTime   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=test_start_time,json=testStartTime,proto3" json:"test_start_time,omitempty"`
	TestEndTime     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=test_end_time,json=testEndTime,proto3" json:"test_end_time,omitempty"`
	LogUrl          string                 `protobuf:"bytes,11,opt,name=log_url,json=logUrl,proto3" json:"log_url,omitempty"`
	RawLogUrl       string                 `protobuf:"bytes,12,opt,name=raw_log_url,json=rawLogUrl,proto3" json:"raw_log_url,omitempty"`
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_results_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_test_results_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_test_results_proto_rawDescGZIP(), []int{2}
}

func (x *TestResult) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *TestResult) GetDisplayTestName() string {
	if x != nil {
		return x.DisplayTestName
	}
	return ""
}

func (x *TestResult) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *TestResult) GetTrial() int32 {
	if x != nil {
		return x.Trial
	}
	return 0
}

func (x *TestResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestResult) GetLogTestName() string {
	if x != nil {
		return x.LogTestName
	}
	return ""
}

func (x *TestResult) GetLineNum() int32 {
	if x != nil {
		return x.LineNum
	}
	return 0
}

func (x *TestResult) GetTaskCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TaskCreateTime
	}
	return nil
}

func (x *TestResult) GetTestStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TestStartTime
	}
	return nil
}

func (x *TestResult) GetTestEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TestEndTime
	}
	return nil
}

func (x *TestResult) GetLogUrl() string {
	if x != nil {
		return x.LogUrl
	}
	return ""
}

func (x *TestResult) GetRawLogUrl() string {
	if x != nil {
		return x.RawLogUrl
	}
	return ""
}

type TestResultsEndInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestResultsRecordId string `protobuf:"bytes,1,opt,name=test_results_record_id,json=testResultsRecordId,proto3" json:"test_results_record_id,omitempty"`
}

func (x *TestResultsEndInfo) Reset() {
	*x = TestResultsEndInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_results_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResultsEndInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResultsEndInfo) ProtoMessage() {}

func (x *TestResultsEndInfo) ProtoReflect() protoreflect.Message {
	mi := &file_test_results_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResultsEndInfo.ProtoReflect.Descriptor instead.
func (*TestResultsEndInfo) Descriptor() ([]byte, []int) {
	return file_test_results_proto_rawDescGZIP(), []int{3}
}

func (x *TestResultsEndInfo) GetTestResultsRecordId() string {
	if x != nil {
		return x.TestResultsRecordId
	}
	return ""
}

type TestResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestResultsRecordId string `protobuf:"bytes,1,opt,name=test_results_record_id,json=testResultsRecordId,proto3" json:"test_results_record_id,omitempty"`
}

func (x *TestResultsResponse) Reset() {
	*x = TestResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_results_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResultsResponse) ProtoMessage() {}

func (x *TestResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_results_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResultsResponse.ProtoReflect.Descriptor instead.
func (*TestResultsResponse) Descriptor() ([]byte, []int) {
	return file_test_results_proto_rawDescGZIP(), []int{4}
}

func (x *TestResultsResponse) GetTestResultsRecordId() string {
	if x != nil {
		return x.TestResultsRecordId
	}
	return ""
}

var File_test_results_proto protoreflect.FileDescriptor

var file_test_results_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x63, 0x65, 0x64, 0x61, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x03, 0x0a,
	0x0f, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x6f, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xe0, 0x03, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c,
	0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x74, 0x61,
	0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x61, 0x77,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x61, 0x77, 0x4c, 0x6f, 0x67, 0x55, 0x72, 0x6c, 0x22, 0x49, 0x0a, 0x12, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x33, 0x0a, 0x16, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x32, 0xbb, 0x02, 0x0a, 0x10, 0x43, 0x65, 0x64, 0x61, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x16, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a,
	0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x4f, 0x0a,
	0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0e,
	0x5a, 0x0c, 0x72, 0x70, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_results_proto_rawDescOnce sync.Once
	file_test_results_proto_rawDescData = file_test_results_proto_rawDesc
)

func file_test_results_proto_rawDescGZIP() []byte {
	file_test_results_proto_rawDescOnce.Do(func() {
		file_test_results_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_results_proto_rawDescData)
	})
	return file_test_results_proto_rawDescData
}

var file_test_results_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_test_results_proto_goTypes = []interface{}{
	(*TestResultsInfo)(nil),       // 0: cedar.TestResultsInfo
	(*TestResults)(nil),           // 1: cedar.TestResults
	(*TestResult)(nil),            // 2: cedar.TestResult
	(*TestResultsEndInfo)(nil),    // 3: cedar.TestResultsEndInfo
	(*TestResultsResponse)(nil),   // 4: cedar.TestResultsResponse
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_test_results_proto_depIdxs = []int32{
	2, // 0: cedar.TestResults.results:type_name -> cedar.TestResult
	5, // 1: cedar.TestResult.task_create_time:type_name -> google.protobuf.Timestamp
	5, // 2: cedar.TestResult.test_start_time:type_name -> google.protobuf.Timestamp
	5, // 3: cedar.TestResult.test_end_time:type_name -> google.protobuf.Timestamp
	0, // 4: cedar.CedarTestResults.CreateTestResultsRecord:input_type -> cedar.TestResultsInfo
	1, // 5: cedar.CedarTestResults.AddTestResults:input_type -> cedar.TestResults
	1, // 6: cedar.CedarTestResults.StreamTestResults:input_type -> cedar.TestResults
	3, // 7: cedar.CedarTestResults.CloseTestResultsRecord:input_type -> cedar.TestResultsEndInfo
	4, // 8: cedar.CedarTestResults.CreateTestResultsRecord:output_type -> cedar.TestResultsResponse
	4, // 9: cedar.CedarTestResults.AddTestResults:output_type -> cedar.TestResultsResponse
	4, // 10: cedar.CedarTestResults.StreamTestResults:output_type -> cedar.TestResultsResponse
	4, // 11: cedar.CedarTestResults.CloseTestResultsRecord:output_type -> cedar.TestResultsResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_test_results_proto_init() }
func file_test_results_proto_init() {
	if File_test_results_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_results_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResultsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_results_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_results_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_results_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResultsEndInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_results_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_results_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_test_results_proto_goTypes,
		DependencyIndexes: file_test_results_proto_depIdxs,
		MessageInfos:      file_test_results_proto_msgTypes,
	}.Build()
	File_test_results_proto = out.File
	file_test_results_proto_rawDesc = nil
	file_test_results_proto_goTypes = nil
	file_test_results_proto_depIdxs = nil
}
