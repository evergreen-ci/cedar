// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.3
// source: perf.proto

package internal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StorageLocation int32

const (
	StorageLocation_UNKNOWN    StorageLocation = 0
	StorageLocation_CEDAR_S3   StorageLocation = 1
	StorageLocation_PROJECT_S3 StorageLocation = 2
	StorageLocation_EPHEMERAL  StorageLocation = 4
	StorageLocation_LOCAL      StorageLocation = 5
)

// Enum value maps for StorageLocation.
var (
	StorageLocation_name = map[int32]string{
		0: "UNKNOWN",
		1: "CEDAR_S3",
		2: "PROJECT_S3",
		4: "EPHEMERAL",
		5: "LOCAL",
	}
	StorageLocation_value = map[string]int32{
		"UNKNOWN":    0,
		"CEDAR_S3":   1,
		"PROJECT_S3": 2,
		"EPHEMERAL":  4,
		"LOCAL":      5,
	}
)

func (x StorageLocation) Enum() *StorageLocation {
	p := new(StorageLocation)
	*p = x
	return p
}

func (x StorageLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_perf_proto_enumTypes[0].Descriptor()
}

func (StorageLocation) Type() protoreflect.EnumType {
	return &file_perf_proto_enumTypes[0]
}

func (x StorageLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageLocation.Descriptor instead.
func (StorageLocation) EnumDescriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{0}
}

type RollupType int32

const (
	RollupType_SUM                RollupType = 0
	RollupType_MEAN               RollupType = 1
	RollupType_MEDIAN             RollupType = 2
	RollupType_MAX                RollupType = 3
	RollupType_MIN                RollupType = 4
	RollupType_STANDARD_DEVIATION RollupType = 5
	RollupType_THROUGHPUT         RollupType = 6
	RollupType_LATENCY            RollupType = 7
	RollupType_PERCENTILE_99TH    RollupType = 8
	RollupType_PERCENTILE_95TH    RollupType = 9
	RollupType_PERCENTILE_90TH    RollupType = 10
	RollupType_PERCENTILE_80TH    RollupType = 11
	RollupType_PERCENTILE_50TH    RollupType = 12
)

// Enum value maps for RollupType.
var (
	RollupType_name = map[int32]string{
		0:  "SUM",
		1:  "MEAN",
		2:  "MEDIAN",
		3:  "MAX",
		4:  "MIN",
		5:  "STANDARD_DEVIATION",
		6:  "THROUGHPUT",
		7:  "LATENCY",
		8:  "PERCENTILE_99TH",
		9:  "PERCENTILE_95TH",
		10: "PERCENTILE_90TH",
		11: "PERCENTILE_80TH",
		12: "PERCENTILE_50TH",
	}
	RollupType_value = map[string]int32{
		"SUM":                0,
		"MEAN":               1,
		"MEDIAN":             2,
		"MAX":                3,
		"MIN":                4,
		"STANDARD_DEVIATION": 5,
		"THROUGHPUT":         6,
		"LATENCY":            7,
		"PERCENTILE_99TH":    8,
		"PERCENTILE_95TH":    9,
		"PERCENTILE_90TH":    10,
		"PERCENTILE_80TH":    11,
		"PERCENTILE_50TH":    12,
	}
)

func (x RollupType) Enum() *RollupType {
	p := new(RollupType)
	*p = x
	return p
}

func (x RollupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RollupType) Descriptor() protoreflect.EnumDescriptor {
	return file_perf_proto_enumTypes[1].Descriptor()
}

func (RollupType) Type() protoreflect.EnumType {
	return &file_perf_proto_enumTypes[1]
}

func (x RollupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RollupType.Descriptor instead.
func (RollupType) EnumDescriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{1}
}

type ResultID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project   string                 `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Version   string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Variant   string                 `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	TaskName  string                 `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	Execution int32                  `protobuf:"varint,5,opt,name=execution,proto3" json:"execution,omitempty"`
	TaskId    string                 `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TestName  string                 `protobuf:"bytes,7,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	Parent    string                 `protobuf:"bytes,8,opt,name=parent,proto3" json:"parent,omitempty"`
	Trial     int32                  `protobuf:"varint,9,opt,name=trial,proto3" json:"trial,omitempty"`
	Tags      []string               `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	Arguments map[string]int32       `protobuf:"bytes,11,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Mainline  bool                   `protobuf:"varint,12,opt,name=mainline,proto3" json:"mainline,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Order     int32                  `protobuf:"varint,14,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ResultID) Reset() {
	*x = ResultID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultID) ProtoMessage() {}

func (x *ResultID) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultID.ProtoReflect.Descriptor instead.
func (*ResultID) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{0}
}

func (x *ResultID) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ResultID) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ResultID) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *ResultID) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ResultID) GetExecution() int32 {
	if x != nil {
		return x.Execution
	}
	return 0
}

func (x *ResultID) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ResultID) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *ResultID) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ResultID) GetTrial() int32 {
	if x != nil {
		return x.Trial
	}
	return 0
}

func (x *ResultID) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ResultID) GetArguments() map[string]int32 {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ResultID) GetMainline() bool {
	if x != nil {
		return x.Mainline
	}
	return false
}

func (x *ResultID) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ResultID) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ResultData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *ResultID       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Artifacts []*ArtifactInfo `protobuf:"bytes,2,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	Rollups   []*RollupValue  `protobuf:"bytes,3,rep,name=rollups,proto3" json:"rollups,omitempty"`
}

func (x *ResultData) Reset() {
	*x = ResultData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultData) ProtoMessage() {}

func (x *ResultData) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultData.ProtoReflect.Descriptor instead.
func (*ResultData) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{1}
}

func (x *ResultData) GetId() *ResultID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResultData) GetArtifacts() []*ArtifactInfo {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *ResultData) GetRollups() []*RollupValue {
	if x != nil {
		return x.Rollups
	}
	return nil
}

type ArtifactInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location    StorageLocation        `protobuf:"varint,1,opt,name=location,proto3,enum=cedar.StorageLocation" json:"location,omitempty"`
	Bucket      string                 `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Prefix      string                 `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Path        string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Format      DataFormat             `protobuf:"varint,5,opt,name=format,proto3,enum=cedar.DataFormat" json:"format,omitempty"`
	Compression CompressionType        `protobuf:"varint,6,opt,name=compression,proto3,enum=cedar.CompressionType" json:"compression,omitempty"`
	Schema      SchemaType             `protobuf:"varint,7,opt,name=schema,proto3,enum=cedar.SchemaType" json:"schema,omitempty"`
	Tags        []string               `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ArtifactInfo) Reset() {
	*x = ArtifactInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactInfo) ProtoMessage() {}

func (x *ArtifactInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactInfo.ProtoReflect.Descriptor instead.
func (*ArtifactInfo) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{2}
}

func (x *ArtifactInfo) GetLocation() StorageLocation {
	if x != nil {
		return x.Location
	}
	return StorageLocation_UNKNOWN
}

func (x *ArtifactInfo) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *ArtifactInfo) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ArtifactInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ArtifactInfo) GetFormat() DataFormat {
	if x != nil {
		return x.Format
	}
	return DataFormat_TEXT
}

func (x *ArtifactInfo) GetCompression() CompressionType {
	if x != nil {
		return x.Compression
	}
	return CompressionType_NONE
}

func (x *ArtifactInfo) GetSchema() SchemaType {
	if x != nil {
		return x.Schema
	}
	return SchemaType_RAW_EVENTS
}

func (x *ArtifactInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ArtifactInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type MetricsSeriesEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsComplete  bool                   `protobuf:"varint,2,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
	CompletedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
}

func (x *MetricsSeriesEnd) Reset() {
	*x = MetricsSeriesEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsSeriesEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsSeriesEnd) ProtoMessage() {}

func (x *MetricsSeriesEnd) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsSeriesEnd.ProtoReflect.Descriptor instead.
func (*MetricsSeriesEnd) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{3}
}

func (x *MetricsSeriesEnd) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MetricsSeriesEnd) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

func (x *MetricsSeriesEnd) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

type MetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{4}
}

func (x *MetricsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MetricsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Count   int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SendResponse) Reset() {
	*x = SendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponse) ProtoMessage() {}

func (x *SendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponse.ProtoReflect.Descriptor instead.
func (*SendResponse) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{5}
}

func (x *SendResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SendResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SendResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MetricsPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Counters *MetricsCounters       `protobuf:"bytes,2,opt,name=counters,proto3" json:"counters,omitempty"`
	Timers   *MetricsTimers         `protobuf:"bytes,3,opt,name=timers,proto3" json:"timers,omitempty"`
	Gauges   *MetricsGauges         `protobuf:"bytes,4,opt,name=gauges,proto3" json:"gauges,omitempty"`
}

func (x *MetricsPoint) Reset() {
	*x = MetricsPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsPoint) ProtoMessage() {}

func (x *MetricsPoint) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsPoint.ProtoReflect.Descriptor instead.
func (*MetricsPoint) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{6}
}

func (x *MetricsPoint) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MetricsPoint) GetCounters() *MetricsCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *MetricsPoint) GetTimers() *MetricsTimers {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *MetricsPoint) GetGauges() *MetricsGauges {
	if x != nil {
		return x.Gauges
	}
	return nil
}

type MetricsCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ops    int64 `protobuf:"varint,1,opt,name=ops,proto3" json:"ops,omitempty"`
	Size   int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Errors int64 `protobuf:"varint,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *MetricsCounters) Reset() {
	*x = MetricsCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsCounters) ProtoMessage() {}

func (x *MetricsCounters) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsCounters.ProtoReflect.Descriptor instead.
func (*MetricsCounters) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{7}
}

func (x *MetricsCounters) GetOps() int64 {
	if x != nil {
		return x.Ops
	}
	return 0
}

func (x *MetricsCounters) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MetricsCounters) GetErrors() int64 {
	if x != nil {
		return x.Errors
	}
	return 0
}

type MetricsTimers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Total    *durationpb.Duration `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *MetricsTimers) Reset() {
	*x = MetricsTimers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsTimers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsTimers) ProtoMessage() {}

func (x *MetricsTimers) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsTimers.ProtoReflect.Descriptor instead.
func (*MetricsTimers) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{8}
}

func (x *MetricsTimers) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *MetricsTimers) GetTotal() *durationpb.Duration {
	if x != nil {
		return x.Total
	}
	return nil
}

type MetricsGauges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   int64 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Workers int64 `protobuf:"varint,2,opt,name=workers,proto3" json:"workers,omitempty"`
	Failed  bool  `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *MetricsGauges) Reset() {
	*x = MetricsGauges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsGauges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsGauges) ProtoMessage() {}

func (x *MetricsGauges) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsGauges.ProtoReflect.Descriptor instead.
func (*MetricsGauges) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{9}
}

func (x *MetricsGauges) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *MetricsGauges) GetWorkers() int64 {
	if x != nil {
		return x.Workers
	}
	return 0
}

func (x *MetricsGauges) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

type MetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Event []*MetricsPoint `protobuf:"bytes,3,rep,name=Event,proto3" json:"Event,omitempty"`
}

func (x *MetricsEvent) Reset() {
	*x = MetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsEvent) ProtoMessage() {}

func (x *MetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsEvent.ProtoReflect.Descriptor instead.
func (*MetricsEvent) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{10}
}

func (x *MetricsEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MetricsEvent) GetEvent() []*MetricsPoint {
	if x != nil {
		return x.Event
	}
	return nil
}

type RollupValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//
	//	*RollupValue_Int
	//	*RollupValue_Fl
	Value         isRollupValue_Value `protobuf_oneof:"value"`
	Type          RollupType          `protobuf:"varint,4,opt,name=type,proto3,enum=cedar.RollupType" json:"type,omitempty"`
	Version       int64               `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	UserSubmitted bool                `protobuf:"varint,6,opt,name=user_submitted,json=userSubmitted,proto3" json:"user_submitted,omitempty"`
}

func (x *RollupValue) Reset() {
	*x = RollupValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollupValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollupValue) ProtoMessage() {}

func (x *RollupValue) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollupValue.ProtoReflect.Descriptor instead.
func (*RollupValue) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{11}
}

func (x *RollupValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *RollupValue) GetValue() isRollupValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *RollupValue) GetInt() int64 {
	if x, ok := x.GetValue().(*RollupValue_Int); ok {
		return x.Int
	}
	return 0
}

func (x *RollupValue) GetFl() float64 {
	if x, ok := x.GetValue().(*RollupValue_Fl); ok {
		return x.Fl
	}
	return 0
}

func (x *RollupValue) GetType() RollupType {
	if x != nil {
		return x.Type
	}
	return RollupType_SUM
}

func (x *RollupValue) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RollupValue) GetUserSubmitted() bool {
	if x != nil {
		return x.UserSubmitted
	}
	return false
}

type isRollupValue_Value interface {
	isRollupValue_Value()
}

type RollupValue_Int struct {
	Int int64 `protobuf:"varint,2,opt,name=int,proto3,oneof"`
}

type RollupValue_Fl struct {
	Fl float64 `protobuf:"fixed64,3,opt,name=fl,proto3,oneof"`
}

func (*RollupValue_Int) isRollupValue_Value() {}

func (*RollupValue_Fl) isRollupValue_Value() {}

type ArtifactData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Artifacts []*ArtifactInfo `protobuf:"bytes,2,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (x *ArtifactData) Reset() {
	*x = ArtifactData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactData) ProtoMessage() {}

func (x *ArtifactData) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactData.ProtoReflect.Descriptor instead.
func (*ArtifactData) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{12}
}

func (x *ArtifactData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ArtifactData) GetArtifacts() []*ArtifactInfo {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

type RollupData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rollups []*RollupValue `protobuf:"bytes,2,rep,name=rollups,proto3" json:"rollups,omitempty"`
}

func (x *RollupData) Reset() {
	*x = RollupData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perf_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollupData) ProtoMessage() {}

func (x *RollupData) ProtoReflect() protoreflect.Message {
	mi := &file_perf_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollupData.ProtoReflect.Descriptor instead.
func (*RollupData) Descriptor() ([]byte, []int) {
	return file_perf_proto_rawDescGZIP(), []int{13}
}

func (x *RollupData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RollupData) GetRollups() []*RollupValue {
	if x != nil {
		return x.Rollups
	}
	return nil
}

var File_perf_proto protoreflect.FileDescriptor

var file_perf_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x63, 0x65,
	0x64, 0x61, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x44, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x3c, 0x0a, 0x0e,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x0c,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3b, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73,
	0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x67, 0x61, 0x75, 0x67,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x61, 0x75, 0x67, 0x65, 0x73, 0x52, 0x06,
	0x67, 0x61, 0x75, 0x67, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x77, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x57, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x61, 0x75, 0x67, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x49, 0x0a, 0x0c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x02,
	0x66, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x02, 0x66, 0x6c, 0x12, 0x25,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x51, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x22, 0x4a, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x73, 0x2a, 0x64,
	0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x45, 0x44, 0x41, 0x52, 0x5f, 0x53, 0x33, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x33, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x50, 0x48, 0x45, 0x4d, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x2a, 0x06, 0x47, 0x52,
	0x49, 0x44, 0x46, 0x53, 0x2a, 0xdb, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4d, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4e,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x49, 0x4e, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x50, 0x55, 0x54, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07,
	0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x39, 0x39, 0x54, 0x48, 0x10, 0x08, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x39, 0x35, 0x54,
	0x48, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c,
	0x45, 0x5f, 0x39, 0x30, 0x54, 0x48, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x38, 0x30, 0x54, 0x48, 0x10, 0x0b, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x35, 0x30, 0x54, 0x48,
	0x10, 0x0c, 0x32, 0xd2, 0x02, 0x0a, 0x17, 0x43, 0x65, 0x64, 0x61, 0x72, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3f,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x13, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x73,
	0x12, 0x11, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x13, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a,
	0x13, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x3f, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x64, 0x1a,
	0x16, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0e, 0x5a, 0x0c, 0x72, 0x70, 0x63, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_perf_proto_rawDescOnce sync.Once
	file_perf_proto_rawDescData = file_perf_proto_rawDesc
)

func file_perf_proto_rawDescGZIP() []byte {
	file_perf_proto_rawDescOnce.Do(func() {
		file_perf_proto_rawDescData = protoimpl.X.CompressGZIP(file_perf_proto_rawDescData)
	})
	return file_perf_proto_rawDescData
}

var file_perf_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_perf_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_perf_proto_goTypes = []interface{}{
	(StorageLocation)(0),          // 0: cedar.StorageLocation
	(RollupType)(0),               // 1: cedar.RollupType
	(*ResultID)(nil),              // 2: cedar.ResultID
	(*ResultData)(nil),            // 3: cedar.ResultData
	(*ArtifactInfo)(nil),          // 4: cedar.ArtifactInfo
	(*MetricsSeriesEnd)(nil),      // 5: cedar.MetricsSeriesEnd
	(*MetricsResponse)(nil),       // 6: cedar.MetricsResponse
	(*SendResponse)(nil),          // 7: cedar.SendResponse
	(*MetricsPoint)(nil),          // 8: cedar.MetricsPoint
	(*MetricsCounters)(nil),       // 9: cedar.MetricsCounters
	(*MetricsTimers)(nil),         // 10: cedar.MetricsTimers
	(*MetricsGauges)(nil),         // 11: cedar.MetricsGauges
	(*MetricsEvent)(nil),          // 12: cedar.MetricsEvent
	(*RollupValue)(nil),           // 13: cedar.RollupValue
	(*ArtifactData)(nil),          // 14: cedar.ArtifactData
	(*RollupData)(nil),            // 15: cedar.RollupData
	nil,                           // 16: cedar.ResultID.ArgumentsEntry
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
	(DataFormat)(0),               // 18: cedar.DataFormat
	(CompressionType)(0),          // 19: cedar.CompressionType
	(SchemaType)(0),               // 20: cedar.SchemaType
	(*durationpb.Duration)(nil),   // 21: google.protobuf.Duration
}
var file_perf_proto_depIdxs = []int32{
	16, // 0: cedar.ResultID.arguments:type_name -> cedar.ResultID.ArgumentsEntry
	17, // 1: cedar.ResultID.created_at:type_name -> google.protobuf.Timestamp
	2,  // 2: cedar.ResultData.id:type_name -> cedar.ResultID
	4,  // 3: cedar.ResultData.artifacts:type_name -> cedar.ArtifactInfo
	13, // 4: cedar.ResultData.rollups:type_name -> cedar.RollupValue
	0,  // 5: cedar.ArtifactInfo.location:type_name -> cedar.StorageLocation
	18, // 6: cedar.ArtifactInfo.format:type_name -> cedar.DataFormat
	19, // 7: cedar.ArtifactInfo.compression:type_name -> cedar.CompressionType
	20, // 8: cedar.ArtifactInfo.schema:type_name -> cedar.SchemaType
	17, // 9: cedar.ArtifactInfo.created_at:type_name -> google.protobuf.Timestamp
	17, // 10: cedar.MetricsSeriesEnd.completed_at:type_name -> google.protobuf.Timestamp
	17, // 11: cedar.MetricsPoint.Time:type_name -> google.protobuf.Timestamp
	9,  // 12: cedar.MetricsPoint.counters:type_name -> cedar.MetricsCounters
	10, // 13: cedar.MetricsPoint.timers:type_name -> cedar.MetricsTimers
	11, // 14: cedar.MetricsPoint.gauges:type_name -> cedar.MetricsGauges
	21, // 15: cedar.MetricsTimers.duration:type_name -> google.protobuf.Duration
	21, // 16: cedar.MetricsTimers.total:type_name -> google.protobuf.Duration
	8,  // 17: cedar.MetricsEvent.Event:type_name -> cedar.MetricsPoint
	1,  // 18: cedar.RollupValue.type:type_name -> cedar.RollupType
	4,  // 19: cedar.ArtifactData.artifacts:type_name -> cedar.ArtifactInfo
	13, // 20: cedar.RollupData.rollups:type_name -> cedar.RollupValue
	3,  // 21: cedar.CedarPerformanceMetrics.CreateMetricSeries:input_type -> cedar.ResultData
	14, // 22: cedar.CedarPerformanceMetrics.AttachArtifacts:input_type -> cedar.ArtifactData
	15, // 23: cedar.CedarPerformanceMetrics.AttachRollups:input_type -> cedar.RollupData
	12, // 24: cedar.CedarPerformanceMetrics.SendMetrics:input_type -> cedar.MetricsEvent
	5,  // 25: cedar.CedarPerformanceMetrics.CloseMetrics:input_type -> cedar.MetricsSeriesEnd
	6,  // 26: cedar.CedarPerformanceMetrics.CreateMetricSeries:output_type -> cedar.MetricsResponse
	6,  // 27: cedar.CedarPerformanceMetrics.AttachArtifacts:output_type -> cedar.MetricsResponse
	6,  // 28: cedar.CedarPerformanceMetrics.AttachRollups:output_type -> cedar.MetricsResponse
	7,  // 29: cedar.CedarPerformanceMetrics.SendMetrics:output_type -> cedar.SendResponse
	6,  // 30: cedar.CedarPerformanceMetrics.CloseMetrics:output_type -> cedar.MetricsResponse
	26, // [26:31] is the sub-list for method output_type
	21, // [21:26] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_perf_proto_init() }
func file_perf_proto_init() {
	if File_perf_proto != nil {
		return
	}
	file_formats_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_perf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsSeriesEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsTimers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsGauges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollupValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perf_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollupData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_perf_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*RollupValue_Int)(nil),
		(*RollupValue_Fl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_perf_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_perf_proto_goTypes,
		DependencyIndexes: file_perf_proto_depIdxs,
		EnumInfos:         file_perf_proto_enumTypes,
		MessageInfos:      file_perf_proto_msgTypes,
	}.Build()
	File_perf_proto = out.File
	file_perf_proto_rawDesc = nil
	file_perf_proto_goTypes = nil
	file_perf_proto_depIdxs = nil
}
